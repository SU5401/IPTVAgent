#! /bin/bash
shells=$(readlink -f .)
. $shells/insert
hostnameCmd=`which hostname`
server=`$hostnameCmd`
grepCmd=`which grep`
awkCmd=`which awk`
catCmd=`which cat`
sedCmd=`which sed`
echoCmd=`which echo`
psCmd=`which ps`
sleepCmd=`which sleep`
dateCmd=`which date`
testCmd=`which test`
function getProcessInfo(){
  processName=`$echoCmd $1`
  PID=$(
  #find rows ending with processName
       $psCmd -ef|$grepCmd  $processName$ \
       | $awkCmd '{{print " "$2" "}
       }')
  folder=$($echoCmd "/proc/"$PID|$sedCmd s/[[:space:]]//g)
  if (`$testCmd -d "$folder"`);then
#When process folder exists.....
  fileProcCPU=$($echoCmd "/proc/"$PID"/stat"|$sedCmd s/[[:space:]]//g)
  fileProcMem=$($echoCmd "/proc/"$PID"/status"|$sedCmd s/[[:space:]]//g)
  fileProcIO=$($echoCmd "/proc/"$PID"/io"|$sedCmd s/[[:space:]]//g)
  #get process CPU statistics  for the first time
  prevProcCPU=$($catCmd ${fileProcCPU})
  prevCPU=(`$sedCmd -n 's/^cpu\s//p' /proc/stat`)
  #sleep for a while
  $sleepCmd 1
  recordTime=`$dateCmd -d today +"%Y-%m-%d %H:%M:%S"`
  #get process CPU statistics  for the second time
  procCPU=$($catCmd ${fileProcCPU})
  CPU=(`$sedCmd -n 's/^cpu\s//p' /proc/stat`)
  #get process mem statistics 
  RSS=$($catCmd ${fileProcMem}\
        |$grepCmd VmRSS            \
        | $sedCmd 's/':'/''/' \
	|  $awkCmd '{{print $2}}'   \
)
  totalMem=$($catCmd /proc/meminfo \
        |$grepCmd MemTotal            \
        | $sedCmd 's/':'/''/' \
	|  $awkCmd '{{print $2}}'   \
)
  #get process IO statistics 
  readByte=$($catCmd ${fileProcIO}\
        |$grepCmd ^read_bytes            \
        | $sedCmd 's/':'/''/' \
	 | $awkCmd '{print $2}'   \
 )
  writeByte=$($catCmd ${fileProcIO}\
        |$grepCmd ^write_bytes            \
        | $sedCmd 's/':'/''/' \
	 |  $awkCmd '{print $2}'   \
 )

  #calculate process CPU statistics 
  prevProcCPUUser=$($echoCmd ${prevProcCPU} | $awkCmd '{print $14}')
  prevProcCPUSystem=$($echoCmd ${prevProcCPU} | $awkCmd '{print $15}')
  prevProcCPUTotal=$($echoCmd ${prevProcCPU} | $awkCmd '{print $14+$15+16+17}')
  prevCPUTotal=0
  for VALUE in "${prevCPU[@]}"; 
  do
    let "prevCPUTotal=$prevCPUTotal+$VALUE"
  done
  procCPUUser=$($echoCmd ${procCPU} | $awkCmd '{print $14}')
  procCPUSystem=$($echoCmd ${procCPU} | $awkCmd '{print $15}')
  procCPUTotal=$($echoCmd ${procCPU} | $awkCmd '{print $14+$15+16+17}')
  CPUTotal=0
  for VALUE in "${CPU[@]}"; 
  do
    let "CPUTotal=$CPUTotal+$VALUE"
  done
  let "diffProcCPUUser=$procCPUUser-$prevProcCPUUser"
  let "diffProcCPUSystem=$procCPUSystem-$prevProcCPUSystem"
  let "diffProcCPUTotal=$procCPUTotal-$prevProcCPUTotal"
  let "diffCPUTotal=$CPUTotal-$prevCPUTotal"
  procCPUUserP=`$echoCmd "scale=4;$diffProcCPUUser/$diffCPUTotal*100"|bc |  $awkCmd '{printf "%.2f", $0}'` 
  procCPUSystemP=`$echoCmd "scale=4;$diffProcCPUSystem/$diffCPUTotal*100"|bc |  $awkCmd '{printf "%.2f", $0}'` 
  procCPUTotalP=`$echoCmd "scale=4;$diffProcCPUTotal/$diffCPUTotal*100"|bc |  $awkCmd '{printf "%.2f", $0}'` 
  ####calculate process Mem statistics 
  memoryP=`$echoCmd "scale=4;$RSS/$totalMem*100"|bc |  $awkCmd '{printf "%.2f", $0}'`
  SQLINSERT="insert into process_info(processName,status,user,system,total,memory,rss,readByte,writeByte,recordTime,server) values(\"$processName\",1,$procCPUUserP,$procCPUSystemP,$procCPUTotalP,$memoryP,$RSS,$readByte,$writeByte,\"$recordTime\",\"$server\");"
else
#When the process folder doesn't exist
  recordTime=`$dateCmd -d today +"%Y-%m-%d %H:%M:%S"`
  SQLINSERT="insert into process_info(processName,status,user,system,total,memory,rss,readByte,writeByte,recordTime,server) values(\"$processName\",0,0,0,0,0,0,0,0,\"$recordTime\",\"$server\");"

fi
  
  $echoCmd $SQLINSERT
  insert $SQLINSERT

}






